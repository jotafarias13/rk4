* rk4
A library for solving ODE's using Runge-Kutta 4 in C!

rk4 is a library written in C to help users solve ODE's using Runge-Kutta 4 method within their C/C++ code. The goal of rk4 is to update a given state array with the new values for the states calculated by the library. For that, the user only needs to define a function which contains the ODE's. More information below!

* Usage

* IDE Setup
As there are many IDE's out there to code in C/C++, I'll just suggest that you search how to create a library in your favorite IDE (you'll need both rk4.h and rk4.c files for that). After that, just link the created library to your project and you're good to go!

* Manual Setup
First things first: you need to decide wether you want to use the header and source files (rk4.h and rk4.c, respectively) or the header file and a static or dynamic library (rk4.a  or rk4.dylib, respectively). Dynamic libraries with .dylib are for MacOS users, but you get the point. If you want to use the header and source files just put them inside your project directory and create a an object file (.o) so your linker has access to the definitions of the functions. This way, you'll be able to use the header and object files to get rk4 running inside your project. Just as a reminder, here's how you'd create an object file in MacOS. If you want to do this using the Makefile file, just type "make obj".

#+begin_src shell

gcc -c rk4.c -I rk4.h -o rk4.o

#+end_src

Now, if you want to use the header file with either a static or dynamic library, you'll have to create the library (the Makefile can do that for you) and then move it to your machine's library search path, that is, one of the directories it searches for libraries when compiling or executing a binary file. Luckly, the Makefile can also do that for you. If you don't know the difference between static and dynamic libraries I suggest you search about them a little bit. But, in a nutshell, static libraries are compiled with the rest of the code when creating a binary, thus adding up to the size of the binary. Dynamic libraries, on the other hand, are only loaded after you execute the binary, thus NOT increasing its size. To find out how to do all these things, checkout the Makefile section below!

** Makefile
In order to generate an object file and a static or dynamic library, you can use the Makefile in this repo. To do that, just type "make obj", "make static" or "make dynamic" in your shell. The default commands are for MacOS users, but if you use Linux, the commands are commented. So, just uncomment what you need and you're all set. Also, if you don't want to move the library to your library search path manually, there's also a command for that: "make static_move_to_path" or "make dynamic_move_to_path" will do the job. Similarly, it has commands for doing this in MacOS and Linux. Also, you may want to add the header file to your computer's include search path, instead of leaving it in your project's directory. To do this, use the "make include_move_to_path" command. Finally, in order to use the "move_to_path" commands in your Makefile, you have to enter sudo mode, that is, to have super user privileges. So, after you run the command, you'll have to enter your password.

Note: if you're a Windows user and don't use an IDE, I suggest you either try the IDE Setup or search how to create object files and static or dynamic libraries on Windows in order to implement this setup. 
* License
This project is licensed under the [[file:LICENSE][GNU General Public License v3.0]].
