* rk4
A library for solving ODE's using Runge-Kutta 4 in C++!

rk4 is a library written in C++ to help users solve ODE's using Runge-Kutta 4 method within their C++ code. The goal of rk4 is to update a given state array with the new values for the states calculated by the library. For that, the user only needs to define a function which contains the ODE's. More information below!

* Usage

* IDE Setup
As there are many IDE's out there to code in C++, I'll just suggest that you search how to create a library in your favorite IDE (you'll need both rk4.h and rk4.cpp files for that). After that, just link the created library to your project and you're good to go!

* Manual Setup
First things first: you need to decide wether you want to use the header and source files (rk4.h and rk4.cpp, respectively) or the header file and a static or dynamic library (rk4.a  or rk4.dylib, respectively). Dynamic libraries with .dylib are for MacOS users, but you get the point. If you want to use the header and source files just put them inside your project directory and create a an object file (.o) so your linker has access to the definitions of the functions. This way, you'll be able to use the header and object files to get rk4 running inside your project. Just as a reminder, here's how you'd create an object file in MacOS. If you want to do this using the Makefile file, just type "make obj".

#+begin_src shell

g++ -c rk4.cpp -I rk4.h -o rk4.o

#+end_src

Now, if you want to use the header file with either a static or dynamic library, you'll have to create the library (the Makefile can do that for you) and then move it to your machine's library search path, that is, one of the directories it searches for libraries when compiling or executing a binary file. Alternatively, you can create a directory to save your "personal" libraries, that is, libraries that are not native to your computer or installed by others apps. Then, pass the full path of the library anytime you need to use it. Luckly, the Makefile can do just that for you.

If you don't know the difference between static and dynamic libraries I suggest you search about them a little bit. But, in a nutshell, static libraries are compiled with the rest of the code when creating a binary, thus adding up to the size of the binary. Dynamic libraries, on the other hand, are only loaded after you execute the binary (at execution time, known as /dependent libraries/, or at runtime, known as /dinamically loaded libraries/), thus NOT increasing its size. To find out how to do all these things, checkout the Makefile section below!

** Makefile
In order to generate an object file and a static or dynamic library, you can use the Makefile in this repo. To do that, just type "make obj", "make static" or "make dynamic" in your shell. The default commands are for MacOS users, but if you use Linux, the commands are pretty similar. So, just search what you need to do differently and you're all set. Also, to install or uninstall the library, use the "make install" or "make uninstall" commands, respectively. The default install path is "${HOME}/.include" and "${HOME}/.lib", but you can alter that in the install and uninstall shell scripts. You'll see that, after installing, the script changes the LC_ID_DYLIB of the dynamic library to match the new location. You can also move the library and header files to your machine's search path and, if configured correctly, it should work just fine. The standard paths are "/usr/include" and "/usr/local/include" for header files and "/usr/lib" and "/usr/local/lib" for libraries.

Note: if you're a Windows user, I suggest you either try the IDE Setup or search how to create object files and static or dynamic libraries on Windows in order to implement this setup. 

** Library Usage
After installing the library, just make sure to include the header and library files when compiling the binary for your app, or when creating new libraries that have rk4 as a dependency. Below you'll find how to include the header and library files when compiling binaries using static and dynamic libraries, respectively.

#+begin_src shell

g++ <app>.cpp -lrk4 -L <path-to-lib> -I <path-to-header> -o <binary-name>

#+end_src

#+begin_src shell

g++ <app>.cpp <path-to-lib>/librk4.dylib -I <path-to-header> -o <binary-name>

#+end_src

* License
This project is licensed under the [[file:LICENSE][GNU General Public License v3.0]].
